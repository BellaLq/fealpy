import argparse


# Argument parsing
parser = argparse.ArgumentParser(description=
        """
        Finite Element Solution for 3D Timoshenko Beam.
        """)

parser.add_argument('--backend',
        default='numpy', type=str,
        help='Default backend is numpy')

parser.add_argument('--pde',
                    default=2, type=int,
                    help='id of the PDE model, default is 2')

parser.add_argument('--init_mesh',
                    default='edgemesh', type=str,
                    help='Type of mesh, default is EdgeMesh')

parser.add_argument('--space_degree',
        default=1, type=int,
        help='Degree of Finite Element Space, default is 1')

parser.add_argument('--beam_E',
                    default=2.07e11, type=float,
                    help='Type of mesh, default is the beam Young modulus')

parser.add_argument('--beam_nu',
                    default=0.276, type=float,
                    help='Type of mesh, default is the beam Poisson ratio')

parser.add_argument('--axle_E',
                    default=1.976e6, type=float,
                    help='Type of mesh, default is the axle Young modulus')

parser.add_argument('--axle_nu',
                    default=-0.5, type=float,
                    help='Type of mesh, default is the axle Poisson ratio')

parser.add_argument('--pbar_log',
                    default=True, type=bool,
                    help='Whether to show progress bar, default is True')

parser.add_argument('--log_level',
                    default='INFO', type=str,
                    help='Log level, default is INFO, options are DEBUG, INFO, WARNING, ERROR, CRITICAL')

options = vars(parser.parse_args()) 

from fealpy.backend import backend_manager as bm
bm.set_backend(options['backend'])

from fealpy.csm.fem import TimobeamAxleModel
model = TimobeamAxleModel(options)
# model.__str__()
# model.timo_axle_system()
# u_data = model.solve()
# print("u", u_data.reshape(-1, 6))

import numpy as np
u = np.array([
    [ 3.31886710e-03, -1.79242680e-03, -5.76718402e-03, -1.73533384e-06, -8.42906994e-12, -1.42257266e-06],
    [ 3.31886710e-03, -1.89271817e-03, -5.76718556e-03, -1.73533384e-06, -5.19728766e-11, -1.42257266e-06],
    [ 3.31886710e-03, -1.99300954e-03, -5.76717466e-03, -1.73533384e-06,  8.93818492e-12, -1.42257266e-06],
    [ 3.31886710e-03, -2.01292556e-03, -5.76717373e-03, -1.73533384e-06,  3.65913224e-12, -1.42257266e-06],
    [ 3.31886710e-03, -2.03284158e-03, -5.76717281e-03, -1.73533384e-06, -1.43630019e-12, -1.42257266e-06],
    [ 3.31886710e-03, -2.09579044e-03, -5.76717117e-03, -1.73533785e-06, -2.01600182e-12, -1.42257599e-06],
    [ 3.31886711e-03, -2.15873947e-03, -5.76716993e-03, -1.73534527e-06, -1.94515123e-12, -1.42258254e-06],
    [ 3.31886711e-03, -2.22168881e-03, -5.76716910e-03, -1.73535549e-06, -1.75883133e-12, -1.42259218e-06],
    [ 3.31886712e-03, -2.28463860e-03, -5.76716869e-03, -1.73536791e-06, -1.94851284e-12, -1.42260476e-06],
    [ 3.31886718e-03, -2.47527249e-03, -5.76716778e-03, -1.73544217e-06,  1.15418437e-11, -1.42269495e-06],
    [ 3.31886723e-03, -2.66592024e-03, -5.76717159e-03, -1.73551643e-06, -4.53450441e-11, -1.42281177e-06],
    [ 3.31886730e-03, -3.00598874e-03, -5.76715997e-03, -1.73559183e-06,  5.18719664e-11, -1.42296799e-06],
    [ 3.31886723e-03, -3.34610035e-03, -5.76716825e-03, -1.73603221e-06, -1.74890602e-11, -1.42317242e-06],
    [ 3.31886714e-03, -3.69055913e-03, -5.76717208e-03, -1.73681552e-06, -4.91788961e-11, -1.42362231e-06],
    [ 3.31886705e-03, -4.03513730e-03, -5.76715836e-03, -1.73759882e-06,  6.41171774e-11, -1.42415902e-06],
    [ 3.31886704e-03, -4.09815724e-03, -5.76715897e-03, -1.73766554e-06,  5.53944560e-11, -1.42420847e-06],
    [ 3.31886703e-03, -4.16117916e-03, -5.76715989e-03, -1.73771648e-06,  5.11339122e-11, -1.42424677e-06],
    [ 3.31886703e-03, -4.22420256e-03, -5.76716117e-03, -1.73775105e-06,  4.91638524e-11, -1.42427312e-06],
    [ 3.31886702e-03, -4.28722690e-03, -5.76716285e-03, -1.73776864e-06,  4.81776897e-11, -1.42428671e-06],
    [ 3.31886702e-03, -4.30716691e-03, -5.76716382e-03, -1.73776864e-06,  4.69095899e-11, -1.42428671e-06],
    [ 3.31886702e-03, -4.32710693e-03, -5.76716477e-03, -1.73776864e-06,  4.79954773e-11, -1.42428671e-06],
    [ 3.31886702e-03, -4.42751914e-03, -5.76717693e-03, -1.73776864e-06, -4.87634713e-11, -1.42428671e-06],
    [ 3.31886702e-03, -4.52793135e-03, -5.76717549e-03, -1.73776864e-06, -7.90856195e-12, -1.42428671e-06],
    [ 6.47677216e-23, -5.19074664e-23, -2.60926774e-23,  4.18622038e-24, -4.18622038e-24,  4.18622038e-24],
    [ 6.47677893e-23, -5.25370226e-23, -2.60925934e-23,  3.55671541e-24, -3.55671541e-24,  3.55671541e-24],
    [ 6.47679297e-23, -5.31666533e-23, -2.60924406e-23,  2.92721277e-24, -2.92721277e-24,  2.92721277e-24],
    [ 6.47681303e-23, -5.37963472e-23, -2.60922318e-23,  2.29771116e-24, -2.29771116e-24,  2.29771116e-24],
    [ 6.47683785e-23, -5.44260933e-23, -2.60919796e-23,  1.66820930e-24, -1.66820930e-24,  1.66820930e-24],
    [ 6.48068901e-23, -7.19695926e-23, -2.60533640e-23, -1.58368416e-23,  1.58368416e-23, -1.58368416e-23],
    [ 6.48079644e-23, -7.26008664e-23, -2.60522957e-23, -1.64670338e-23,  1.64670338e-23, -1.64670338e-23],
    [ 6.48088141e-23, -7.32319355e-23, -2.60514550e-23, -1.70972429e-23,  1.70972429e-23, -1.70972429e-23],
    [ 6.48094036e-23, -7.38627590e-23, -2.60508784e-23, -1.77274634e-23,  1.77274634e-23, -1.77274634e-23],
    [ 6.48097055e-23, -7.44933043e-23, -2.60505932e-23, -1.83576897e-23,  1.83576897e-23, -1.83576897e-23]
])

data = np.array([
    [ 3.31886710e-03, -1.79284500e-03, -4.40474000e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -1.89314800e-03, -4.04504800e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -1.99345100e-03, -4.06445700e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -2.09376000e-03, -4.08486600e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -2.03328800e-03, -4.06441200e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -2.09624400e-03, -4.00768200e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -2.15199900e-03, -4.00769500e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -2.22221500e-03, -4.04980400e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -2.28510800e-03, -4.08499200e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -2.47457400e-03, -5.08481600e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -2.66653900e-03, -5.02747400e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -3.00362800e-03, -5.61355900e-03, -3.18e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -3.34629200e-03, -5.95244900e-03, -3.18e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -3.69053400e-03, -6.29571700e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -4.03480900e-03, -6.63916300e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -4.09776500e-03, -6.07019800e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -4.16072100e-03, -6.07648050e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -4.22367900e-03, -6.08276320e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -4.28663600e-03, -6.08906410e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -4.34065555e-03, -6.09130400e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -4.32647400e-03, -6.09302000e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.31886710e-03, -4.44267900e-03, -7.00303500e-03, -3.19e-07,  1.42e-06, -1.42e-06],
    [ 3.32e-03,       -4.53e-03,       -7.13e-03,       -7.05e-24,  7.05e-24, -7.05e-24],
    [ 6.48e-23,       -5.19e-23,       -1.45e-23,       -7.05e-24,  7.05e-24, -7.05e-24],
    [ 6.48e-23,       -5.25e-23,       -1.55e-23,       -7.05e-24,  7.05e-24, -7.05e-24],
    [ 6.48e-23,       -5.32e-23,       -1.61e-23,       -7.05e-24,  7.05e-24, -7.05e-24],
    [ 6.48e-23,       -5.38e-23,       -1.67e-23,       -7.06e-24,  7.06e-24, -7.06e-24],
    [ 6.48e-23,       -5.44e-23,       -1.74e-23,       -7.06e-24,  7.06e-24, -7.06e-24],
    [ 6.48e-23,       -7.20e-23,       -3.48e-23,       -7.11e-24,  7.11e-24, -7.11e-24],
    [ 6.48e-23,       -7.26e-23,       -3.58e-23,       -7.11e-24,  7.11e-24, -7.11e-24],
    [ 6.48e-23,       -7.32e-23,       -3.62e-23,       -7.12e-24,  7.12e-24, -7.12e-24],
    [ 6.48e-23,       -7.39e-23,       -3.67e-23,       -7.12e-24,  7.12e-24, -7.12e-24],
    [ 6.48e-23,       -7.45e-23,       -3.73e-23,       -7.12e-24,  7.12e-24, -7.12e-24]
])

print(np.array_equal(u, data))   # 判断是否完全一样
print(np.allclose(u, data, rtol=1e-8, atol=1e-12))  # 判断数值上是否近似相等


# diff = np.abs(u - data)
# print("最大差值：", diff.max())
# print("是否小于容差：", np.all(diff < 1e-8))

# mask = ~np.isclose(u, data, rtol=1e-8, atol=1e-12)
# rows, cols = np.where(mask)
# for r, c in zip(rows, cols):
#     print(f"不同元素在[{r}, {c}]: u={u[r,c]} data={data[r,c]}")
